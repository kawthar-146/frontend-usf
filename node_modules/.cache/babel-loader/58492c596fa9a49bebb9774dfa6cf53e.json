{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\frontend-usf\\\\src\\\\context\\\\SessionProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SessionContext from \"./SessionContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SessionProvider({\n  children\n}) {\n  _s();\n\n  const [role, setRole] = useState({\n    message: \"Student\"\n  }); // const [roleStatus, setRoleStatus] = useState('')\n\n  const [session, setSession] = useState({\n    user: {\n      access_token: localStorage.getItem(\"access_token\")\n    }\n  });\n\n  function updateSession(nextSession) {\n    let value = typeof nextSession === \"function\" ? nextSession : prevSession => ({ ...prevSession,\n      ...nextSession\n    });\n    setSession(value);\n  }\n\n  const verifyUser = async () => {\n    const response = await fetch(\"http://localhost:8000/api/verify\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${session.user.access_token}`\n      }\n    });\n    const result = await response.json();\n    setRole(prevPerson => {\n      return { ...prevPerson,\n        message: result.message\n      };\n    });\n  };\n\n  useEffect(() => {\n    let user_name = localStorage.getItem(\"firstname\");\n    let access_token = localStorage.getItem(\"access_token\");\n    let user = {\n      user_name,\n      access_token\n    };\n    updateSession({\n      user\n    });\n    verifyUser();\n  }, []);\n\n  async function loginDoctor(email, password) {\n    const body = new FormData();\n    body.append(\"email\", email);\n    body.append(\"password\", password);\n    const response = await fetch(\"http://localhost:8000/api/admins/login\", {\n      method: \"post\",\n      body\n    });\n    const result = await response.json();\n    setRole({\n      message: result.role\n    });\n\n    if (result.error) {} else {\n      const {\n        access_token,\n        firstname,\n        id\n      } = result;\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"name\", firstname);\n      localStorage.setItem(\"id\", id);\n      const user = {\n        access_token,\n        firstname,\n        id\n      };\n      updateSession({\n        user\n      });\n    }\n  }\n\n  async function loginStudent(email, password) {\n    const body = new FormData();\n    body.append(\"email\", email);\n    body.append(\"password\", password);\n    const response = await fetch(\"http://localhost:8000/api/users/login\", {\n      method: \"post\",\n      body\n    });\n    const result = await response.json();\n\n    if (result.error) {} else {\n      const {\n        access_token,\n        firstname,\n        id\n      } = result;\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"name\", firstname);\n      localStorage.setItem(\"id\", id);\n      const user = {\n        access_token,\n        firstname,\n        id\n      };\n      updateSession({\n        user\n      });\n    }\n  }\n\n  function logout() {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"name\");\n    localStorage.removeItem(\"id\");\n    setRole(\"\");\n    const user = {\n      access_token: null,\n      firstname: null\n    };\n    updateSession({\n      user\n    });\n    setRole({\n      message: \"Student\"\n    });\n  }\n\n  const context = {\n    session,\n    actions: {\n      loginDoctor,\n      loginStudent,\n      logout\n    },\n    role\n  };\n  return /*#__PURE__*/_jsxDEV(SessionContext.Provider, {\n    value: context,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SessionProvider, \"0TUa4Ffrn0HtQyBlTHn+9IUnMt4=\");\n\n_c = SessionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"SessionProvider\");","map":{"version":3,"sources":["C:/Users/HP/Desktop/frontend-usf/src/context/SessionProvider.js"],"names":["React","useState","useEffect","SessionContext","SessionProvider","children","role","setRole","message","session","setSession","user","access_token","localStorage","getItem","updateSession","nextSession","value","prevSession","verifyUser","response","fetch","method","headers","Authorization","result","json","prevPerson","user_name","loginDoctor","email","password","body","FormData","append","error","firstname","id","setItem","loginStudent","logout","removeItem","context","actions"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,eAAe,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAuC;AAAA;;AACpD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC;AAAEO,IAAAA,OAAO,EAAE;AAAX,GAAD,CAAhC,CADoD,CAEpD;;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC;AACrCU,IAAAA,IAAI,EAAE;AAAEC,MAAAA,YAAY,EAAEC,YAAY,CAACC,OAAb,CAAqB,cAArB;AAAhB;AAD+B,GAAD,CAAtC;;AAIA,WAASC,aAAT,CAAuBC,WAAvB,EAAoC;AAClC,QAAIC,KAAK,GACP,OAAOD,WAAP,KAAuB,UAAvB,GACIA,WADJ,GAEKE,WAAD,KAAkB,EAAE,GAAGA,WAAL;AAAkB,SAAGF;AAArB,KAAlB,CAHN;AAIAN,IAAAA,UAAU,CAACO,KAAD,CAAV;AACD;;AAED,QAAME,UAAU,GAAG,YAAY;AAC7B,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAD,EAAqC;AAC/DC,MAAAA,MAAM,EAAE,KADuD;AAE/DC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASf,OAAO,CAACE,IAAR,CAAaC,YAAa;AAD5C;AAFsD,KAArC,CAA5B;AAOA,UAAMa,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAT,EAArB;AACAnB,IAAAA,OAAO,CAACoB,UAAU,IAAI;AACpB,aAAO,EACL,GAAGA,UADE;AAELnB,QAAAA,OAAO,EAAEiB,MAAM,CAACjB;AAFX,OAAP;AAID,KALM,CAAP;AAMD,GAfD;;AAkBAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0B,SAAS,GAAGf,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAhB;AACA,QAAIF,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAnB;AACA,QAAIH,IAAI,GAAG;AAAEiB,MAAAA,SAAF;AAAahB,MAAAA;AAAb,KAAX;AACAG,IAAAA,aAAa,CAAC;AAAEJ,MAAAA;AAAF,KAAD,CAAb;AACAQ,IAAAA,UAAU;AACX,GANQ,EAMN,EANM,CAAT;;AAQA,iBAAeU,WAAf,CAA2BC,KAA3B,EAAkCC,QAAlC,EAA4C;AAC1C,UAAMC,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACAD,IAAAA,IAAI,CAACE,MAAL,CAAY,OAAZ,EAAqBJ,KAArB;AACAE,IAAAA,IAAI,CAACE,MAAL,CAAY,UAAZ,EAAwBH,QAAxB;AACA,UAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAD,EAA2C;AACrEC,MAAAA,MAAM,EAAE,MAD6D;AAErEU,MAAAA;AAFqE,KAA3C,CAA5B;AAIA,UAAMP,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAT,EAArB;AACAnB,IAAAA,OAAO,CAAC;AAACC,MAAAA,OAAO,EAAGiB,MAAM,CAACnB;AAAlB,KAAD,CAAP;;AACA,QAAImB,MAAM,CAACU,KAAX,EAAkB,CACjB,CADD,MACO;AACL,YAAM;AAAEvB,QAAAA,YAAF;AAAgBwB,QAAAA,SAAhB;AAA2BC,QAAAA;AAA3B,UAAkCZ,MAAxC;AACAZ,MAAAA,YAAY,CAACyB,OAAb,CAAqB,cAArB,EAAqC1B,YAArC;AACAC,MAAAA,YAAY,CAACyB,OAAb,CAAqB,MAArB,EAA6BF,SAA7B;AACAvB,MAAAA,YAAY,CAACyB,OAAb,CAAqB,IAArB,EAA2BD,EAA3B;AACA,YAAM1B,IAAI,GAAG;AAAEC,QAAAA,YAAF;AAAgBwB,QAAAA,SAAhB;AAA2BC,QAAAA;AAA3B,OAAb;AACAtB,MAAAA,aAAa,CAAC;AAAEJ,QAAAA;AAAF,OAAD,CAAb;AACD;AACF;;AAED,iBAAe4B,YAAf,CAA4BT,KAA5B,EAAmCC,QAAnC,EAA6C;AAC3C,UAAMC,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACAD,IAAAA,IAAI,CAACE,MAAL,CAAY,OAAZ,EAAqBJ,KAArB;AACAE,IAAAA,IAAI,CAACE,MAAL,CAAY,UAAZ,EAAwBH,QAAxB;AACA,UAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAD,EAA0C;AACpEC,MAAAA,MAAM,EAAE,MAD4D;AAEpEU,MAAAA;AAFoE,KAA1C,CAA5B;AAIA,UAAMP,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAT,EAArB;;AACA,QAAID,MAAM,CAACU,KAAX,EAAkB,CACjB,CADD,MACO;AACL,YAAM;AAAEvB,QAAAA,YAAF;AAAgBwB,QAAAA,SAAhB;AAA2BC,QAAAA;AAA3B,UAAkCZ,MAAxC;AACAZ,MAAAA,YAAY,CAACyB,OAAb,CAAqB,cAArB,EAAqC1B,YAArC;AACAC,MAAAA,YAAY,CAACyB,OAAb,CAAqB,MAArB,EAA6BF,SAA7B;AACAvB,MAAAA,YAAY,CAACyB,OAAb,CAAqB,IAArB,EAA2BD,EAA3B;AACA,YAAM1B,IAAI,GAAG;AAAEC,QAAAA,YAAF;AAAgBwB,QAAAA,SAAhB;AAA2BC,QAAAA;AAA3B,OAAb;AACAtB,MAAAA,aAAa,CAAC;AAAEJ,QAAAA;AAAF,OAAD,CAAb;AACD;AACF;;AAED,WAAS6B,MAAT,GAAkB;AAChB3B,IAAAA,YAAY,CAAC4B,UAAb,CAAwB,cAAxB;AACA5B,IAAAA,YAAY,CAAC4B,UAAb,CAAwB,MAAxB;AACA5B,IAAAA,YAAY,CAAC4B,UAAb,CAAwB,IAAxB;AACAlC,IAAAA,OAAO,CAAC,EAAD,CAAP;AACA,UAAMI,IAAI,GAAG;AAAEC,MAAAA,YAAY,EAAE,IAAhB;AAAsBwB,MAAAA,SAAS,EAAE;AAAjC,KAAb;AACArB,IAAAA,aAAa,CAAC;AAAEJ,MAAAA;AAAF,KAAD,CAAb;AACAJ,IAAAA,OAAO,CAAC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAP;AACD;;AAED,QAAMkC,OAAO,GAAG;AACdjC,IAAAA,OADc;AAEdkC,IAAAA,OAAO,EAAE;AAAEd,MAAAA,WAAF;AAAeU,MAAAA,YAAf;AAA6BC,MAAAA;AAA7B,KAFK;AAGdlC,IAAAA;AAHc,GAAhB;AAKA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEoC,OAAhC;AAAA,cACGrC;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAvGuBD,e;;KAAAA,e","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SessionContext from \"./SessionContext\";\n\nexport default function SessionProvider({ children }) {\n  const [role, setRole] = useState({ message: \"Student\" });\n  // const [roleStatus, setRoleStatus] = useState('')\n\n  const [session, setSession] = useState({\n    user: { access_token: localStorage.getItem(\"access_token\") },\n  });\n\n  function updateSession(nextSession) {\n    let value =\n      typeof nextSession === \"function\"\n        ? nextSession\n        : (prevSession) => ({ ...prevSession, ...nextSession });\n    setSession(value);\n  }\n\n  const verifyUser = async () => {\n    const response = await fetch(\"http://localhost:8000/api/verify\", {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${session.user.access_token}`,\n      },\n    });\n\n    const result = await response.json();\n    setRole(prevPerson => {\n      return { \n        ...prevPerson, \n        message: result.message\n      }\n    })\n  };\n\n\n  useEffect(() => {\n    let user_name = localStorage.getItem(\"firstname\");\n    let access_token = localStorage.getItem(\"access_token\");\n    let user = { user_name, access_token };\n    updateSession({ user });\n    verifyUser();\n  }, []);\n\n  async function loginDoctor(email, password) {\n    const body = new FormData();\n    body.append(\"email\", email);\n    body.append(\"password\", password);\n    const response = await fetch(\"http://localhost:8000/api/admins/login\", {\n      method: \"post\",\n      body,\n    });\n    const result = await response.json();\n    setRole({message : result.role})\n    if (result.error) {\n    } else {\n      const { access_token, firstname, id } = result;\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"name\", firstname);\n      localStorage.setItem(\"id\", id);\n      const user = { access_token, firstname, id };\n      updateSession({ user });\n    }\n  }\n\n  async function loginStudent(email, password) {\n    const body = new FormData();\n    body.append(\"email\", email);\n    body.append(\"password\", password);\n    const response = await fetch(\"http://localhost:8000/api/users/login\", {\n      method: \"post\",\n      body,\n    });\n    const result = await response.json();\n    if (result.error) {\n    } else {\n      const { access_token, firstname, id } = result;\n      localStorage.setItem(\"access_token\", access_token);\n      localStorage.setItem(\"name\", firstname);\n      localStorage.setItem(\"id\", id);\n      const user = { access_token, firstname, id };\n      updateSession({ user });\n    }\n  }\n\n  function logout() {\n    localStorage.removeItem(\"access_token\");\n    localStorage.removeItem(\"name\");\n    localStorage.removeItem(\"id\");\n    setRole(\"\");\n    const user = { access_token: null, firstname: null };\n    updateSession({ user });\n    setRole({ message: \"Student\" });\n  }\n\n  const context = {\n    session,\n    actions: { loginDoctor, loginStudent, logout },\n    role,\n  };\n  return (\n    <SessionContext.Provider value={context}>\n      {children}\n    </SessionContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}